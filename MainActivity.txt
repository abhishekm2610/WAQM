package com.example.wmas_1;

import android.Manifest;
import android.app.Activity;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Build;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.NotificationCompat;
import android.os.Bundle;
import android.support.v4.app.NotificationManagerCompat;
import android.telephony.SmsManager;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.Toast;

import static android.support.v4.app.NotificationCompat.VISIBILITY_PUBLIC;

public class MainActivity extends Activity {
    Button b1,close,details,backb,forb;
    WebView wv;
    int PERMISSION_ALL = 1;
    String[] PERMISSIONS = {
            Manifest.permission.READ_PHONE_STATE,
            Manifest.permission.RECEIVE_SMS,
            Manifest.permission.SEND_SMS,
            Manifest.permission.READ_SMS,
            Manifest.permission.SET_ALARM,
            Manifest.permission.READ_CONTACTS
    };
    private static MainActivity instance;
    private static String recNum = "12345";
    private static String CHANNEL_ID= "101" ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        instance = this;
        try {
            if (!hasPermissions(this, PERMISSIONS)) {
                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_ALL);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            Toast.makeText(getApplicationContext(),"Error in getting permission call",Toast.LENGTH_LONG).show();
        }
        b1 = findViewById(R.id.button);
        close =  findViewById(R.id.close_button);
        details = findViewById(R.id.get_details);
        try {
            b1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    finish();
                }
            });
            close.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        SmsManager smsmanager = SmsManager.getDefault();
                        smsmanager.sendTextMessage(recNum, null, "`%&Close", null, null);
                        Toast.makeText(getApplicationContext(), "Your SMS was sent successfully!",
                                Toast.LENGTH_LONG).show();
                    } catch (Exception ex) {
                        Toast.makeText(getApplicationContext(), "Error in sending SMS!",
                                Toast.LENGTH_LONG).show();
                        ex.printStackTrace();
                    }
                }
            });
            details.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    setContentView(R.layout.web);

                    wv = findViewById(R.id.webb);
                    wv.setWebViewClient( new WebViewClient());
                    backb=findViewById(R.id.backb);
                    forb=findViewById(R.id.forb);
                    wv.loadUrl("http://waqm.000webhostapp.com/");

                    backb.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if(wv.canGoBack())
                            {
                                wv.goBack();
                            }
                        }
                    });

                    forb.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (wv.canGoForward())
                            {
                                wv.goForward();
                            }
                        }
                    });
                    wv.setOnKeyListener(new View.OnKeyListener()
                    {
                        @Override
                        public boolean onKey(View v, int keyCode, KeyEvent event)
                        {
                            if(event.getAction() == KeyEvent.ACTION_DOWN)
                            {
                                WebView webView = (WebView) v;

                                switch(keyCode)
                                {
                                    case KeyEvent.KEYCODE_BACK:
                                        if(webView.canGoBack())
                                        {
                                            webView.goBack();
                                            return true;
                                        }
                                        break;
                                }
                            }

                            return false;
                        }
                    });
                }
            });
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }
    public static MainActivity getInstance() {
        return instance;
    }
    public static boolean hasPermissions(Context context, String... permissions) {
        if (context != null && permissions != null) {
            for (String permission : permissions) {
                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {
                    return false;
                }
            }
        }
        return true;
    }

    @Override
    public void onBackPressed()
    {

        Intent intent=new Intent(MainActivity.this,MainActivity.class);
        startActivity(intent);
        finish();

    }
   protected void addNotification(String msg) {
        createNotificationChannel();
       Intent myIntent = new Intent(this, MainActivity.class);
       int notificationId = 12;
       PendingIntent pendingIntent = PendingIntent.getActivity(
               this,
               0,
               myIntent,
               PendingIntent.FLAG_UPDATE_CURRENT);
       NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)
               .setSmallIcon(R.mipmap.ic_launcher)
               .setContentTitle("Alert")
               .setContentText(msg)
               .setContentIntent(pendingIntent)
               .setAutoCancel(true)
               .setPriority(NotificationCompat.PRIORITY_DEFAULT)
               .setVisibility(VISIBILITY_PUBLIC);


       NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);

// notificationId is a unique int for each notification that you must define
       notificationManager.notify(notificationId, builder.build());

       /*
        NotificationCompat.Builder builder =
                new NotificationCompat.Builder(this)
                       .setSmallIcon(R.drawable.abc)
                        .setContentTitle("Alert!!!")
                        .setContentText(msg);

        Intent notificationIntent = new Intent(this, MainActivity.class);
        PendingIntent contentIntent = PendingIntent.getActivity(this, 0, notificationIntent,
                PendingIntent.FLAG_UPDATE_CURRENT);
        builder.setContentIntent(contentIntent);

        // Add as notification
        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        manager.notify(0, builder.build()); */
    }

    private void createNotificationChannel() {
        // Create the NotificationChannel, but only on API 26+ because
        // the NotificationChannel class is new and not in the support library
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            CharSequence name = "Alert1!";
            String description = "Desc";
            int importance = NotificationManager.IMPORTANCE_DEFAULT;
            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);
            channel.setDescription(description);
            // Register the channel with the system; you can't change the importance
            // or other notification behaviors after this
            NotificationManager notificationManager = getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(channel);
        }
    }
}
